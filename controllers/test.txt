saved prev instance, ignorethisfile.

const searchCars = async (req, res) => {
    try {
        const { query } = req.query;
        console.log(query)
        if (!query) {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: "Query parameter 'query' is required", data: {}, status_code: StatusCodes.BAD_REQUEST });
        }

        const searchFields = ['carMake', 'carModel', 'location']; 
        const numericFields = ['year'];

        // const searchQuery = {
        //     $or: searchFields.map(field => ({ [field]: { $regex: query, $options: 'i' } })) 
        // };

        const searchQuery = {
            $and: query.split(' ').map(word => (
                {
                    $or: searchFields.map(field => (
                        { [field]: { $regex: new RegExp(word, 'i') } }
                    ))
                }
            ))
        };


        const numericQuery = Number(query);
        if (!isNaN(numericQuery)) {
            numericFields.forEach(field => {
                searchQuery.$or.push({ [field]: numericQuery }); // Numeric query for numeric fields
            });
        }

        const cars = await carListings.find(searchQuery);

        if (cars.length === 0) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: "No cars found matching the search criteria", data: {}, status_code: StatusCodes.NOT_FOUND });
        }

        res.status(StatusCodes.OK).json({ message: "Success", data: cars, status_code: StatusCodes.OK });
    } catch (error) {
        console.error(error);
        res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ message: "Internal server error", data: {}, status_code: StatusCodes.INTERNAL_SERVER_ERROR });
    }
};





const searchCars = async (req, res) => {
    try {
        const { query } = req.query;
        console.log(query)
        if (!query) {
            return res.status(StatusCodes.BAD_REQUEST).json({ message: "Query parameter 'query' is required", data: {}, status_code: StatusCodes.BAD_REQUEST });
        }

        const searchFields = ['carMake', 'carModel', 'location', 'transmission', 'fuelType']; 
        const numericFields = ['year'];

        const searchQuery = {
            $and: query.split(' ').map(word => (
                {
                    $or: searchFields.map(field => (
                        { [field]: { $regex: new RegExp(word, 'i') } }
                    ))
                }
            ))
        };
        
        let cars = await carListings.find(searchQuery); // Declare cars variable here

        const words = query.split(' ');
        const numericQueries = words.filter(word => !isNaN(parseFloat(word))).map(parseFloat); // Convert numeric values to numbers
        console.log(numericQueries);
        if (numericQueries.length > 0) {
            const filteredCars = cars.filter(car => {
                return numericQueries.every(numericQuery => {
                    return numericFields.some(field => {
                        return car[field] === numericQuery;
                    });
                });
            });

            cars = filteredCars; // Assign filteredCars to cars variable
        }

        if (cars.length === 0) {
            return res.status(StatusCodes.NOT_FOUND).json({ message: "No cars found matching the search criteria", data: {}, status_code: StatusCodes.NOT_FOUND });
        }

        res.status(StatusCodes.OK).json({ message: "Success", data: cars, status_code: StatusCodes.OK });
    } catch (error) {
        console.error(error);
        res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ message: "Internal server error", data: {}, status_code: StatusCodes.INTERNAL_SERVER_ERROR });
    }
};




const searchCars = async (req, res) => {
//     try {
//         const { query } = req.query;
//         if (!query) {
//             return res.status(StatusCodes.BAD_REQUEST).json({ message: "Query parameter 'query' is required", data: {}, status_code: StatusCodes.BAD_REQUEST });
//         }

//         const searchFields = ['carMake', 'carModel', 'location', 'transmission', 'fuelType']; 
//         const numericFields = ['year'];
//         const words = query.split(' ');
//         const stringQueries = words.filter(word => isNaN(parseFloat(word))).map(parseFloat); // Convert numeric values to numbers
//         const numericQueries = words.filter(word => !isNaN(parseFloat(word))).map(parseFloat); // Convert numeric values to numbers
        
//         const searchQuery = {
//             $and: stringQueries.map(word => (
//                 {
//                     $or: searchFields.map(field => (
//                         { [field]: { $regex: new RegExp(word, 'i') } }
//                     ))
//                 }
//             ))
//         };
        
//         const cars = await carListings.find(searchQuery); // Declare cars variable here
//         console.log(cars)
        
//         // console.log(numericQueries)
//         // if (numericQueries.length > 0) {
//         //     const filteredCars = cars.filter(car => {
//         //         return numericQueries.every(numericQuery => {
//         //             return numericFields.some(field => {
//         //                 return car[field] === numericQuery;
//         //             });
//         //         });
//         //     });

//         //     cars = filteredCars; // Assign filteredCars to cars variable
//         // }

//         if (cars.length === 0) {
//             return res.status(StatusCodes.NOT_FOUND).json({ message: "No cars found matching the search criteria", data: {}, status_code: StatusCodes.NOT_FOUND });
//         }

//         res.status(StatusCodes.OK).json({ message: "Success", data: cars, status_code: StatusCodes.OK });
//     } catch (error) {
//         console.error(error);
//         res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ message: "Internal server error", data: {}, status_code: StatusCodes.INTERNAL_SERVER_ERROR });
//     }
// };



